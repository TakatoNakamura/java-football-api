plugins {
	id 'java'
	id 'org.springframework.boot' version '2.5.4'
	id 'io.spring.dependency-management' version '1.1.0'
}

group = 'com.football'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

// for Doma 2
// JavaクラスとSQLファイルの出力先ディレクトリを同じにする
processResources.destinationDir = compileJava.destinationDir
// コンパイルより前にSQLファイルを出力先ディレクトリにコピーするために依存関係を逆転する
compileJava.dependsOn processResources

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	compileOnly {
		extendsFrom annotationProcessor
	}
	domaGenRuntime
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
}

dependencies {

	def jdbcDriver = "mysql:mysql-connector-java"
	def domaVersion = "2.28.0"

	// spring-boot-gradle-plugin によりバージョン番号が自動で設定されるもの
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-web-services'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	implementation 'org.springframework.session:spring-session-jdbc'
	implementation("${jdbcDriver}")

	// spring-boot-gradle-plugin によりバージョン番号が自動で設定されないもの
	implementation ("org.seasar.doma:doma:${domaVersion}")
	implementation 'org.apache.commons:commons-lang3:3.7'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// for Doma-Gen
    domaGenRuntime("org.seasar.doma:doma-gen:${domaVersion}")
    domaGenRuntime("${jdbcDriver}")
}

// for Doma-Gen
task domaGen {
	doLast{
    	// まず変更が必要なもの
    	def rootPackageName  = 'com.football.api'
    	def daoPackagePath   = 'src/main/java/com/football/api/dao'
    	def dbUrl            = 'jdbc:mysql://localhost:3306/football'
    	def dbUser           = 'football_db_admin'
    	def dbPassword       = 'football'
    	def tableNamePattern = '.*'
    	// おそらく変更不要なもの
    	def importOfComponentAndAutowiredDomaConfig = "${rootPackageName}.util.doma.ComponentAndAutowiredDomaConfig"
    	def workDirPath      = 'work'
    	def workDaoDirPath   = "${workDirPath}/dao"

    	// 作業用ディレクトリを削除する
    	clearDir("${workDirPath}")

    	// 現在の Dao インターフェースのバックアップを取得する
    	copy() {
        	from "${daoPackagePath}"
        	into "${workDaoDirPath}/org"
    	}

    	// Dao インターフェース、Entity クラスを生成する
    	ant.taskdef(resource: 'domagentask.properties', classpath: configurations.domaGenRuntime.asPath)
    	ant.gen(url: "${dbUrl}", user: "${dbUser}", password: "${dbPassword}", tableNamePattern: "${tableNamePattern}") {
        	entityConfig(packageName: "${rootPackageName}.entity", useListener: false)
        	daoConfig(packageName: "${rootPackageName}.dao")
        	sqlConfig()
    		}

    	// 生成された Dao インターフェースを作業用ディレクトリにコピーし、
    	// @ComponentAndAutowiredDomaConfig アノテーションを付加する
    	copy() {
        	from "${daoPackagePath}"
        	into "${workDaoDirPath}/replace"
        	filter {
            	line -> line.replaceAll('import org.seasar.doma.Dao;', "import ${importOfComponentAndAutowiredDomaConfig};\nimport org.seasar.doma.Dao;").replaceAll('@Dao', '@Dao\n@ComponentAndAutowiredDomaConfig')
				}
    		}

    	// @ComponentAndAutowiredDomaConfig アノテーションを付加した Dao インターフェースを
    	// dao パッケージへ戻す
    	copy() {
        	from "${workDaoDirPath}/replace"
        	into "${daoPackagePath}"
    		}

    	// 元々 dao パッケージ内にあったファイルを元に戻す
    	copy() {
        	from "${workDaoDirPath}/org"
        	into "${daoPackagePath}"
    		}

    	// 作業用ディレクトリを削除する
    	clearDir("${workDirPath}")
	}
	domaGen.group = "doma"
}

void clearDir(String dirPath) {
    delete dirPath
}

tasks.named('test') {
	useJUnitPlatform()
}
